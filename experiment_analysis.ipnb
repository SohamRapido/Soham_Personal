{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3bf87ab0-d08a-4d9f-95a2-1edf0ed0844b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from datetime import datetime, timedelta\n",
    "import time\n",
    "from pyhive import presto\n",
    "import json\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a3bebb2e-1cf5-4cb4-9ff6-dfffbb6fa4f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Analysing the A/B experiment run between 2022-11-21 & 2022-11-27 in the city of Mumbai\n"
     ]
    }
   ],
   "source": [
    "city = 'Mumbai'\n",
    "experiment_type = 'A/B' # choose between - 'A/B' or 'pre/post'\n",
    "\n",
    "experiment_start_date = '2022-11-21'\n",
    "experiment_end_date = '2022-11-27'\n",
    "\n",
    "if experiment_type == 'pre/post':\n",
    "    control_start_date = '2022-11-21'\n",
    "    control_end_date = '2022-11-27'\n",
    "\n",
    "print('Analysing the', experiment_type, 'experiment run between', experiment_start_date, '&', experiment_end_date, 'in the city of', city)\n",
    "\n",
    "def get_conn():\n",
    "    conn = presto.connect(\n",
    "        # host='bi-presto.serving.data.production.internal',\n",
    "        host='presto.processing.yoda.run',\n",
    "        port=80,\n",
    "        protocol='http',\n",
    "        catalog='hive',\n",
    "        username='nildip.mukherjee@rapido.bike',\n",
    "    )\n",
    "    return conn\n",
    "presto_conn = get_conn()\n",
    "\n",
    "\n",
    "fetch_rides = True # set to True to get pings & rides data\n",
    "fetch_burn = True # set to True to get burn data\n",
    "fetch_incentives = False # set to True to get captain level achievement data\n",
    "fetch_incentive_achievement = False # set to True to get incentive_id level achievement data\n",
    "active_day = 'dropped_orders' # choose between - 'dropped_orders' or 'accepted_pings'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cce6c414-b3cd-4a95-bd4f-d63e9fe60055",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fetching pings & rides data for :  2022-11-21  to  2022-11-27\n",
      " fetched pings & rides for captains 115235\n",
      "(115235, 10)\n"
     ]
    }
   ],
   "source": [
    "## Pings & Rides data ##\n",
    "\n",
    "def get_rides(start_date, end_date, city):\n",
    "    \n",
    "    print('fetching pings & rides data for : ', start_date, ' to ', end_date)\n",
    "    rides_query = \"\"\"select \n",
    "                        captain_id, service_obj_city_display_name as city, yyyymmdd,\n",
    "                        case when quarter_hour >= '0000' and quarter_hour < '0600' then 'night' \n",
    "                             when quarter_hour >= '0600' and quarter_hour < '1200' then 'morning_peak' \n",
    "                             when quarter_hour >= '1200' and quarter_hour < '1700' then 'afternoon' \n",
    "                             when quarter_hour >= '1700' and quarter_hour < '2200' then 'evening_peak' \n",
    "                             when quarter_hour >= '2200' and quarter_hour <= '2345' then 'night' end as time_of_day,\n",
    "                        \n",
    "                        (count(distinct(case when event_type='accepted' and service_obj_service_name='Link' then order_id end))+\n",
    "                        (count(distinct(case when event_type='rider_busy' and service_obj_service_name='Link' then order_id end)))+\n",
    "                        (count(distinct(case when event_type='rider_reject' and service_obj_service_name='Link' then order_id end)))) as total_link_pings,\n",
    "                        (count(distinct(case when event_type='accepted' and service_obj_service_name='Link' then order_id end))) as accepted_link_pings,\n",
    "                        (count(distinct(case when event_type='dropped' and service_obj_service_name='Link' then order_id end))) as dropped_link_orders,\n",
    "                        \n",
    "                        (count(distinct(case when event_type='accepted' and service_obj_service_name in ('Delivery', 'Zomato') then order_id end))+\n",
    "                        (count(distinct(case when event_type='rider_busy' and service_obj_service_name in ('Delivery', 'Zomato') then order_id end)))+\n",
    "                        (count(distinct(case when event_type='rider_reject' and service_obj_service_name in ('Delivery', 'Zomato') then order_id end)))) as total_delivery_pings,\n",
    "                        (count(distinct(case when event_type='accepted' and service_obj_service_name in ('Delivery', 'Zomato') then order_id end))) as accepted_delivery_pings,\n",
    "                        (count(distinct(case when event_type='dropped' and service_obj_service_name in ('Delivery', 'Zomato') then order_id end))) as dropped_delivery_orders\n",
    "                        \n",
    "                    from orders.order_logs_immutable\n",
    "                    \n",
    "                    where yyyymmdd between '{sd}' and '{ed}'\n",
    "                        and service_obj_service_name not like '%Auto%'\n",
    "                        and order_type not like '%auto%'\n",
    "                        and service_obj_city_display_name = '{ct}'\n",
    "                        and (spd_fraud_flag = false or spd_fraud_flag is null)\n",
    "                        and captain_id != ''\n",
    "                        and captain_id is not null\n",
    "                    group by 1,2,3,4 \"\"\".format(sd=start_date.replace('-',''), ed=end_date.replace('-',''), ct=city)\n",
    "    \n",
    "    tmp = pd.read_sql(rides_query, presto_conn)\n",
    "    print(' fetched pings & rides for captains', len(tmp))\n",
    "\n",
    "    return tmp\n",
    "\n",
    "if fetch_rides:\n",
    "    df_rides = pd.DataFrame()\n",
    "\n",
    "    date_list = [pd.to_datetime(experiment_start_date) + timedelta(days=x) for x in range((pd.to_datetime(experiment_end_date)-pd.to_datetime(experiment_start_date)).days + 1)\n",
    "             if (pd.to_datetime(experiment_start_date) + timedelta(days=x)).weekday() == (pd.to_datetime(experiment_end_date)).weekday()]\n",
    "    if pd.to_datetime(experiment_start_date) not in date_list:\n",
    "        date_list.insert(0, pd.to_datetime(experiment_start_date))\n",
    "    date_list = [x.strftime('%Y-%m-%d') for x in date_list]\n",
    "\n",
    "    for sd, ed in zip(date_list, date_list[1:]) :\n",
    "        try:\n",
    "            rides = get_rides(sd, ed, city)\n",
    "        except:\n",
    "            time.sleep(60)\n",
    "            rides = get_rides(sd, ed, city)\n",
    "        df_rides = pd.concat([df_rides, rides])\n",
    "\n",
    "    df_rides = df_rides.drop_duplicates(['captain_id', 'city', 'yyyymmdd', 'time_of_day'])\n",
    "    df_rides['yyyymmdd'] = pd.to_datetime(df_rides['yyyymmdd'])\n",
    "    print(df_rides.shape)\n",
    "    \n",
    "    if experiment_type == 'pre/post':\n",
    "        df_rides_control = pd.DataFrame()\n",
    "\n",
    "        date_list = [pd.to_datetime(control_start_date) + timedelta(days=x) for x in range((pd.to_datetime(control_end_date)-pd.to_datetime(control_start_date)).days + 1)\n",
    "                     if (pd.to_datetime(control_start_date) + timedelta(days=x)).weekday() == (pd.to_datetime(control_end_date)).weekday()]\n",
    "        if pd.to_datetime(control_start_date) not in date_list:\n",
    "            date_list.insert(0, pd.to_datetime(control_start_date))\n",
    "        date_list = [x.strftime('%Y-%m-%d') for x in date_list]\n",
    "\n",
    "        for sd, ed in zip(date_list, date_list[1:]) :\n",
    "            try:\n",
    "                rides = get_rides(sd, ed, city)\n",
    "            except:\n",
    "                time.sleep(60)\n",
    "                rides = get_rides(sd, ed, city)\n",
    "            df_rides_control = pd.concat([df_rides_control, rides])\n",
    "\n",
    "        df_rides_control = df_rides_control.drop_duplicates(['captain_id', 'city', 'yyyymmdd', 'time_of_day'])\n",
    "        df_rides_control['yyyymmdd'] = pd.to_datetime(df_rides_control['yyyymmdd'])\n",
    "        print(df_rides_control.shape)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "23b5f0a6-eeef-4b2f-a3cb-6ad1f4e32000",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_rides = df_rides.pivot_table(index=['captain_id', 'city', 'yyyymmdd'], columns=['time_of_day'], \n",
    "                                values=['total_link_pings', 'accepted_link_pings', 'dropped_link_orders',\n",
    "                                        'total_delivery_pings', 'accepted_delivery_pings', 'dropped_delivery_orders'], aggfunc='sum').fillna(0)\n",
    "df_rides.columns = df_rides.columns.map('_'.join)\n",
    "df_rides.reset_index(inplace=True)\n",
    "\n",
    "df_rides['total_pings_morning_peak'] = df_rides['total_link_pings_morning_peak']+df_rides['total_delivery_pings_morning_peak']\n",
    "df_rides['total_pings_afternoon'] = df_rides['total_link_pings_afternoon']+df_rides['total_delivery_pings_afternoon']\n",
    "df_rides['total_pings_evening_peak'] = df_rides['total_link_pings_evening_peak']+df_rides['total_delivery_pings_evening_peak']\n",
    "df_rides['total_pings_night'] = df_rides['total_link_pings_night']+df_rides['total_delivery_pings_night']\n",
    "\n",
    "df_rides['accepted_pings_morning_peak'] = df_rides['accepted_link_pings_morning_peak']+df_rides['accepted_delivery_pings_morning_peak']\n",
    "df_rides['accepted_pings_afternoon'] = df_rides['accepted_link_pings_afternoon']+df_rides['accepted_delivery_pings_afternoon']\n",
    "df_rides['accepted_pings_evening_peak'] = df_rides['accepted_link_pings_evening_peak']+df_rides['accepted_delivery_pings_evening_peak']\n",
    "df_rides['accepted_pings_night'] = df_rides['accepted_link_pings_night']+df_rides['accepted_delivery_pings_night']\n",
    "\n",
    "df_rides['dropped_orders_morning_peak'] = df_rides['dropped_link_orders_morning_peak']+df_rides['dropped_delivery_orders_morning_peak']\n",
    "df_rides['dropped_orders_afternoon'] = df_rides['dropped_link_orders_afternoon']+df_rides['dropped_delivery_orders_afternoon']\n",
    "df_rides['dropped_orders_evening_peak'] = df_rides['dropped_link_orders_evening_peak']+df_rides['dropped_delivery_orders_evening_peak']\n",
    "df_rides['dropped_orders_night'] = df_rides['dropped_link_orders_night']+df_rides['dropped_delivery_orders_night']\n",
    "\n",
    "df_rides['total_link_pings'] = (df_rides['total_link_pings_morning_peak']+df_rides['total_link_pings_afternoon']+\n",
    "                                df_rides['total_link_pings_evening_peak']+df_rides['total_link_pings_night'])\n",
    "df_rides['total_delivery_pings'] = (df_rides['total_delivery_pings_morning_peak']+df_rides['total_delivery_pings_afternoon']+\n",
    "                                    df_rides['total_delivery_pings_evening_peak']+df_rides['total_delivery_pings_night'])\n",
    "df_rides['total_pings'] = (df_rides['total_pings_morning_peak']+df_rides['total_pings_afternoon']+\n",
    "                           df_rides['total_pings_evening_peak']+df_rides['total_pings_night'])\n",
    "\n",
    "df_rides['accepted_link_pings'] = (df_rides['accepted_link_pings_morning_peak']+df_rides['accepted_link_pings_afternoon']+\n",
    "                                   df_rides['accepted_link_pings_evening_peak']+df_rides['accepted_link_pings_night'])\n",
    "df_rides['accepted_delivery_pings'] = (df_rides['accepted_delivery_pings_morning_peak']+df_rides['accepted_delivery_pings_afternoon']+\n",
    "                                       df_rides['accepted_delivery_pings_evening_peak']+df_rides['accepted_delivery_pings_night'])\n",
    "df_rides['accepted_pings'] = (df_rides['accepted_pings_morning_peak']+df_rides['accepted_pings_afternoon']+\n",
    "                              df_rides['accepted_pings_evening_peak']+df_rides['accepted_pings_night'])\n",
    "\n",
    "df_rides['dropped_link_orders'] = (df_rides['dropped_link_orders_morning_peak']+df_rides['dropped_link_orders_afternoon']+\n",
    "                                   df_rides['dropped_link_orders_evening_peak']+df_rides['dropped_link_orders_night'])\n",
    "df_rides['dropped_delivery_orders'] = (df_rides['dropped_delivery_orders_morning_peak']+df_rides['dropped_delivery_orders_afternoon']+\n",
    "                                       df_rides['dropped_delivery_orders_evening_peak']+df_rides['dropped_delivery_orders_night'])\n",
    "df_rides['dropped_orders'] = (df_rides['dropped_orders_morning_peak']+df_rides['dropped_orders_afternoon']+\n",
    "                              df_rides['dropped_orders_evening_peak']+df_rides['dropped_orders_night'])\n",
    "\n",
    "df_rides['online_days'] = np.where(df_rides['total_pings'] > 0, 1, 0)\n",
    "df_rides['gross_days'] = np.where(df_rides['accepted_pings'] > 0, 1, 0)\n",
    "df_rides['active_days'] = np.where(df_rides['dropped_orders'] > 0, 1, 0)\n",
    "\n",
    "df_rides = df_rides.groupby(['captain_id', 'city'], as_index=False).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9737e6f6-247f-41cc-b6e2-7039bb1e79df",
   "metadata": {},
   "outputs": [],
   "source": [
    "if experiment_type == 'pre/post':\n",
    "    df_rides_control = df_rides_control.pivot_table(index=['captain_id', 'yyyymmdd'], columns=['time_of_day'], \n",
    "                                                    values=['total_link_pings', 'accepted_link_pings', 'dropped_link_orders',\n",
    "                                                            'total_delivery_pings', 'accepted_delivery_pings', 'dropped_delivery_orders'], \n",
    "                                                    aggfunc='sum').fillna(0)\n",
    "    df_rides_control.columns = df_rides_control.columns.map('_'.join)\n",
    "    df_rides_control.reset_index(inplace=True)\n",
    "\n",
    "    df_rides_control['total_pings_morning_peak'] = (df_rides_control['total_link_pings_morning_peak']+\n",
    "                                                    df_rides_control['total_delivery_pings_morning_peak'])\n",
    "    df_rides_control['total_pings_afternoon'] = (df_rides_control['total_link_pings_afternoon']+\n",
    "                                                 df_rides_control['total_delivery_pings_afternoon'])\n",
    "    df_rides_control['total_pings_evening_peak'] = (df_rides_control['total_link_pings_evening_peak']+\n",
    "                                                    df_rides_control['total_delivery_pings_evening_peak'])\n",
    "    df_rides_control['total_pings_night'] = (df_rides_control['total_link_pings_night']+\n",
    "                                             df_rides_control['total_delivery_pings_night'])\n",
    "\n",
    "    df_rides_control['accepted_pings_morning_peak'] = (df_rides_control['accepted_link_pings_morning_peak']+\n",
    "                                                       df_rides_control['accepted_delivery_pings_morning_peak'])\n",
    "    df_rides_control['accepted_pings_afternoon'] = (df_rides_control['accepted_link_pings_afternoon']+\n",
    "                                                    df_rides_control['accepted_delivery_pings_afternoon'])\n",
    "    df_rides_control['accepted_pings_evening_peak'] = (df_rides_control['accepted_link_pings_evening_peak']+\n",
    "                                                       df_rides_control['accepted_delivery_pings_evening_peak'])\n",
    "    df_rides_control['accepted_pings_night'] = (df_rides_control['accepted_link_pings_night']+\n",
    "                                                df_rides_control['accepted_delivery_pings_night'])\n",
    "\n",
    "    df_rides_control['dropped_orders_morning_peak'] = (df_rides_control['dropped_link_orders_morning_peak']+\n",
    "                                                       df_rides_control['dropped_delivery_orders_morning_peak'])\n",
    "    df_rides_control['dropped_orders_afternoon'] = (df_rides_control['dropped_link_orders_afternoon']+\n",
    "                                                    df_rides_control['dropped_delivery_orders_afternoon'])\n",
    "    df_rides_control['dropped_orders_evening_peak'] = (df_rides_control['dropped_link_orders_evening_peak']+\n",
    "                                                       df_rides_control['dropped_delivery_orders_evening_peak'])\n",
    "    df_rides_control['dropped_orders_night'] = (df_rides_control['dropped_link_orders_night']+\n",
    "                                                df_rides_control['dropped_delivery_orders_night'])\n",
    "\n",
    "    df_rides_control['total_link_pings'] = (df_rides_control['total_link_pings_morning_peak']+\n",
    "                                            df_rides_control['total_link_pings_afternoon']+\n",
    "                                            df_rides_control['total_link_pings_evening_peak']+\n",
    "                                            df_rides_control['total_link_pings_night'])\n",
    "    df_rides_control['total_delivery_pings'] = (df_rides_control['total_delivery_pings_morning_peak']+\n",
    "                                                df_rides_control['total_delivery_pings_afternoon']+\n",
    "                                                df_rides_control['total_delivery_pings_evening_peak']+\n",
    "                                                df_rides_control['total_delivery_pings_night'])\n",
    "    df_rides_control['total_pings'] = (df_rides_control['total_pings_morning_peak']+df_rides_control['total_pings_afternoon']+\n",
    "                                       df_rides_control['total_pings_evening_peak']+df_rides_control['total_pings_night'])\n",
    "\n",
    "    df_rides_control['accepted_link_pings'] = (df_rides_control['accepted_link_pings_morning_peak']+\n",
    "                                               df_rides_control['accepted_link_pings_afternoon']+\n",
    "                                               df_rides_control['accepted_link_pings_evening_peak']+\n",
    "                                               df_rides_control['accepted_link_pings_night'])\n",
    "    df_rides_control['accepted_delivery_pings'] = (df_rides_control['accepted_delivery_pings_morning_peak']+\n",
    "                                                   df_rides_control['accepted_delivery_pings_afternoon']+\n",
    "                                                   df_rides_control['accepted_delivery_pings_evening_peak']+\n",
    "                                                   df_rides_control['accepted_delivery_pings_night'])\n",
    "    df_rides_control['accepted_pings'] = (df_rides_control['accepted_pings_morning_peak']+df_rides_control['accepted_pings_afternoon']+\n",
    "                                          df_rides_control['accepted_pings_evening_peak']+df_rides_control['accepted_pings_night'])\n",
    "\n",
    "    df_rides_control['dropped_link_orders'] = (df_rides_control['dropped_link_orders_morning_peak']+\n",
    "                                               df_rides_control['dropped_link_orders_afternoon']+\n",
    "                                               df_rides_control['dropped_link_orders_evening_peak']+\n",
    "                                               df_rides_control['dropped_link_orders_night'])\n",
    "    df_rides_control['dropped_delivery_orders'] = (df_rides_control['dropped_delivery_orders_morning_peak']+\n",
    "                                                   df_rides_control['dropped_delivery_orders_afternoon']+\n",
    "                                                   df_rides_control['dropped_delivery_orders_evening_peak']+\n",
    "                                                   df_rides_control['dropped_delivery_orders_night'])\n",
    "    df_rides_control['dropped_orders'] = (df_rides_control['dropped_orders_morning_peak']+df_rides_control['dropped_orders_afternoon']+\n",
    "                                          df_rides_control['dropped_orders_evening_peak']+df_rides_control['dropped_orders_night'])\n",
    "    \n",
    "    df_rides_control['online_days'] = np.where(df_rides_control['total_pings'] > 0, 1, 0)\n",
    "    df_rides_control['gross_days'] = np.where(df_rides_control['accepted_pings'] > 0, 1, 0)\n",
    "    df_rides_control['active_days'] = np.where(df_rides_control['dropped_orders'] > 0, 1, 0)\n",
    "    \n",
    "    df_rides_control = df_rides_control.groupby(['captain_id'], as_index=False).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f2c8ead1-aa2a-47b0-83c9-5efebbe4d0eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Incentive constructs ##\n",
    "\n",
    "def get_incentive_constructs(start_date, end_date, city):\n",
    "    \n",
    "    print('fetching incentive construct data for : ', start_date, ' to ', end_date)\n",
    "    incentives_query = \"\"\"select _id as incentiveId, yyyymmdd, incentiveType, ruleId, startDate, endDate, priority, goals \n",
    "                          from hive.raw.mongodb_rapidopayroll_incentives_immutable\n",
    "                          where lower(json_extract_scalar(cities, '$[0]')) in ('{ct}')\n",
    "                          and json_extract_scalar(servicenames , '$[0]') = 'Link'\n",
    "                          and incentivetype = 'Daily'\n",
    "                          and yyyymmdd between '{sd}' and '{ed}'\n",
    "                          or startdate between '{sd}' and '{ed}'\n",
    "                          or enddate between '{sd}' and '{ed}'\n",
    "                          \"\"\".format(sd=start_date.replace('-',''), ed=end_date.replace('-',''), ct=city.lower())\n",
    "    \n",
    "    tmp = pd.read_sql(incentives_query, presto_conn)\n",
    "    print(' fetched incentive constructs for ', len(tmp))\n",
    "\n",
    "    return tmp\n",
    "\n",
    "def parse_incentive_constructs(input_df):\n",
    "        tmp = pd.json_normalize(data=json.loads(input_df['goals']))\n",
    "        dow_constructs = pd.DataFrame(tmp.columns.values[0].split(', '), columns=['day_of_week'])\n",
    "        inc_constructs = pd.DataFrame([])\n",
    "        for val in tmp[tmp.columns.values[0]][0]:\n",
    "            tmp_inc = pd.DataFrame(val['rules'])\n",
    "            tmp_inc['uuid'] = val['uuid']\n",
    "            tmp_inc['fromTime'] = val['timeSlot'][0]['fromTime']\n",
    "            tmp_inc['toTime'] = val['timeSlot'][0]['toTime']\n",
    "            inc_constructs = pd.concat([inc_constructs, tmp_inc], axis=0)\n",
    "        output = dow_constructs.merge(inc_constructs, how='cross')\n",
    "        output[['incentiveId', 'yyyymmdd', 'incentiveType', \n",
    "                'ruleId', 'startDate', 'endDate', 'priority']] = input_df[['incentiveId', 'yyyymmdd', 'incentiveType', \n",
    "                                                                           'ruleId', 'startDate', 'endDate', 'priority']]\n",
    "        return output\n",
    "\n",
    "if fetch_incentives:\n",
    "    df_incentives = pd.DataFrame()\n",
    "\n",
    "    date_list = [pd.to_datetime(experiment_start_date) + timedelta(days=x) for x in range((pd.to_datetime(experiment_end_date)-pd.to_datetime(experiment_start_date)).days + 1)\n",
    "             if (pd.to_datetime(experiment_start_date) + timedelta(days=x)).weekday() == (pd.to_datetime(experiment_end_date)).weekday()]\n",
    "    if pd.to_datetime(experiment_start_date) not in date_list:\n",
    "        date_list.insert(0, pd.to_datetime(experiment_start_date))\n",
    "    date_list = [x.strftime('%Y-%m-%d') for x in date_list]\n",
    "\n",
    "    for sd, ed in zip(date_list, date_list[1:]) :\n",
    "        try:\n",
    "            incentives = get_incentive_constructs(sd, ed, city)\n",
    "        except:\n",
    "            time.sleep(60)\n",
    "            incentives = get_incentive_constructs(sd, ed, city)\n",
    "        df_incentives = pd.concat([df_incentives, incentives])\n",
    "        \n",
    "    tmp_output = df_incentives.apply(lambda x: parse_incentive_constructs(x), axis=1)\n",
    "    df_incentives = pd.DataFrame([])\n",
    "    for idx, val in tmp_output.items():\n",
    "        df_incentives = pd.concat([df_incentives, val], axis=0)\n",
    "    df_incentives.sort_values('priority', ascending=False, inplace=True)\n",
    "    df_incentives.drop_duplicates(['incentiveId', 'yyyymmdd', 'day_of_week', 'ruleId', 'fromTime', 'toTime', 'index'], inplace=True)\n",
    "    df_incentives.rename(columns={'index': 'slab'}, inplace=True)\n",
    "    print(df_incentives.shape)\n",
    "    \n",
    "    if experiment_type == 'pre/post':\n",
    "        df_incentives_control = pd.DataFrame()\n",
    "\n",
    "        date_list = [pd.to_datetime(control_start_date) + timedelta(days=x) for x in range((pd.to_datetime(control_end_date)-pd.to_datetime(control_start_date)).days + 1)\n",
    "                     if (pd.to_datetime(control_start_date) + timedelta(days=x)).weekday() == (pd.to_datetime(control_end_date)).weekday()]\n",
    "        if pd.to_datetime(control_start_date) not in date_list:\n",
    "            date_list.insert(0, pd.to_datetime(control_start_date))\n",
    "        date_list = [x.strftime('%Y-%m-%d') for x in date_list]\n",
    "\n",
    "        for sd, ed in zip(date_list, date_list[1:]) :\n",
    "            try:\n",
    "                incentives = get_incentive_constructs(sd, ed, city)\n",
    "            except:\n",
    "                time.sleep(60)\n",
    "                incentives = get_incentive_constructs(sd, ed, city)\n",
    "            df_incentives_control = pd.concat([df_incentives_control, incentives])\n",
    "            \n",
    "        tmp_output = df_incentives_control.apply(lambda x: parse_incentive_constructs(x), axis=1)\n",
    "        df_incentives_control = pd.DataFrame([])\n",
    "        for idx, val in tmp_output.items():\n",
    "            df_incentives_control = pd.concat([df_incentives_control, val], axis=0)\n",
    "        df_incentives_control.sort_values('priority', ascending=False, inplace=True)\n",
    "        df_incentives_control.drop_duplicates(['incentiveId', 'yyyymmdd', 'day_of_week', 'ruleId', 'fromTime', 'toTime', 'index'], inplace=True)\n",
    "        df_incentives_control.rename(columns={'index': 'slab'}, inplace=True)\n",
    "        print(df_incentives_control.shape)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1291c92e-8117-480d-8e6c-7e2ee5cb1cf9",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Incentive acheiviement ##\n",
    "\n",
    "def get_incentive_acheiviement(start_date, end_date, city):\n",
    "    \n",
    "    print('fetching incentive achievement data for : ', start_date, ' to ', end_date)\n",
    "    incentives_query = \"\"\"select riderid as captain_id, incentiveid, yyyymmdd, incentivetype, incentiveprogress_json \n",
    "                          from hive.raw.mongodb_rapidopayroll_incentive_riders_snapshot\n",
    "                          where incentivetype = 'Daily'\n",
    "                          and json_extract_scalar(incentiveprogress_json , '$[0].fieldStatus[0].isAnyRuleSelected') = 'true'\n",
    "                          and yyyymmdd between '{sd}' and '{ed}'\n",
    "                          and riderid in (select captainId from datasets.captain_single_view\n",
    "                                          where activationdate is not null\n",
    "                                          and lower(shift) not like '%auto%'\n",
    "                                          and (lower(registeredcity) in ('{ct}') \n",
    "                                          or lower(lastridecity) in ('{ct}')))\n",
    "                          \"\"\".format(sd=start_date.replace('-',''), ed=end_date.replace('-',''), ct=city.lower())\n",
    "    \n",
    "    tmp = pd.read_sql(incentives_query, presto_conn)\n",
    "    print(' fetched incentive achievement for captains', len(tmp))\n",
    "\n",
    "    return tmp\n",
    "\n",
    "def parse_incentive_acheiviement(input_df):\n",
    "        tmp = pd.json_normalize(data=json.loads(input_df['incentiveprogress_json']))\n",
    "        output = pd.DataFrame([])\n",
    "        for val in tmp['fieldStatus'][0]:\n",
    "            tmp_inc = pd.DataFrame(val['rulesStatus'])[['isRuleCompleted','isRuleSelected', 'isRuleStarted', 'orders', 'paymentTime', 'totalDistance']]\n",
    "            tmp_inc = tmp_inc.sum()\n",
    "            tmp_inc['uuid'] = val['uuid']\n",
    "            output = pd.concat([output, tmp_inc], axis=0)\n",
    "        output[['captain_id', 'incentiveid', 'yyyymmdd', 'incentivetype']] = input_df[['captain_id', 'incentiveid', 'yyyymmdd', 'incentivetype']]\n",
    "        return output\n",
    "\n",
    "if fetch_incentives:\n",
    "    df_incentives_ach = pd.DataFrame()\n",
    "\n",
    "    date_list = [pd.to_datetime(experiment_start_date) + timedelta(days=x) for x in range((pd.to_datetime(experiment_end_date)-pd.to_datetime(experiment_start_date)).days + 1)\n",
    "             if (pd.to_datetime(experiment_start_date) + timedelta(days=x)).weekday() == (pd.to_datetime(experiment_end_date)).weekday()]\n",
    "    if pd.to_datetime(experiment_start_date) not in date_list:\n",
    "        date_list.insert(0, pd.to_datetime(experiment_start_date))\n",
    "    date_list = [x.strftime('%Y-%m-%d') for x in date_list]\n",
    "\n",
    "    for sd, ed in zip(date_list, date_list[1:]) :\n",
    "        try:\n",
    "            incentives_ach = get_incentive_acheiviement(sd, ed, city)\n",
    "        except:\n",
    "            time.sleep(60)\n",
    "            incentives_ach = get_incentive_acheiviement(sd, ed, city)\n",
    "        df_incentives_ach = pd.concat([df_incentives_ach, incentives_ach])\n",
    "        \n",
    "    tmp_output = df_incentives_ach.apply(lambda x: parse_incentive_acheiviement(x), axis=1)\n",
    "    df_incentives_ach = pd.DataFrame([])\n",
    "    for idx, val in tmp_output.items():\n",
    "        df_incentives_ach = pd.concat([df_incentives_ach, val], axis=0)\n",
    "    df_incentives_ach.drop_duplicates(['captain_id', 'yyyymmdd', 'incentiveid', 'ruleId', 'slab'], inplace=True)\n",
    "    print(df_incentives_ach.shape)\n",
    "    \n",
    "    if experiment_type == 'pre/post':\n",
    "        df_incentives_control = pd.DataFrame()\n",
    "\n",
    "        date_list = [pd.to_datetime(control_start_date) + timedelta(days=x) for x in range((pd.to_datetime(control_end_date)-pd.to_datetime(control_start_date)).days + 1)\n",
    "                     if (pd.to_datetime(control_start_date) + timedelta(days=x)).weekday() == (pd.to_datetime(control_end_date)).weekday()]\n",
    "        if pd.to_datetime(control_start_date) not in date_list:\n",
    "            date_list.insert(0, pd.to_datetime(control_start_date))\n",
    "        date_list = [x.strftime('%Y-%m-%d') for x in date_list]\n",
    "\n",
    "        for sd, ed in zip(date_list, date_list[1:]) :\n",
    "            try:\n",
    "                incentives_ach = get_incentive_acheiviement(sd, ed, city)\n",
    "            except:\n",
    "                time.sleep(60)\n",
    "                incentives_ach = get_incentive_acheiviement(sd, ed, city)\n",
    "            df_incentives_ach_control = pd.concat([df_incentives_ach_control, incentives_ach])\n",
    "            \n",
    "        tmp_output = df_incentives_ach_control.apply(lambda x: parse_incentive_acheiviement(x), axis=1)\n",
    "        df_incentives_ach_control = pd.DataFrame([])\n",
    "        for idx, val in tmp_output.items():\n",
    "            df_incentives_ach_control = pd.concat([df_incentives_ach_control, val], axis=0)\n",
    "        df_incentives_ach_control.drop_duplicates(['captain_id', 'yyyymmdd', 'incentiveid', 'ruleId', 'slab'], inplace=True)\n",
    "        print(df_incentives_ach_control.shape)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "68884bac-3ec2-4860-8beb-471f45dbbe7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fetching achievement data at incentive_id level for :  2022-11-21  to  2022-11-27\n",
      " fetched achievement data at incentive_id level  6689\n",
      "(6633, 21)\n"
     ]
    }
   ],
   "source": [
    "## Achievement data at incentive_id level ##\n",
    "\n",
    "def get_incetive_completion(start_date, end_date, city):\n",
    "    \n",
    "    print('fetching achievement data at incentive_id level for : ', start_date, ' to ', end_date)\n",
    "    inc_completion_query = \"\"\"select yyyymmdd, cities, incentivename, incentivetype, incentiveid, subincentiveid,  servicenames, \n",
    "                                     timeslot_fromtime, timeslot_totime, dayslot, startdate, enddate, \n",
    "                                     number_rules_completed, slab_distance_target, slab_order_target, slab_amount,\n",
    "                                     num_participated_slab, num_achieved_cumulative, \n",
    "                                     achievement_pct*100.00 as achievement_pct, mean_orders_participants, incentive_burn_slab\n",
    "                             from (select * , dense_rank() over(partition by subincentiveid, yyyymmdd order by job_epoch desc) as refresh_rank\n",
    "                                   from reports_internal.sql_ingest_incentive_summary_v2 \n",
    "                                   where lower(cities) = '{ct}'\n",
    "                                   and incentivetype in ('Daily', 'Weekly Fixed')\n",
    "                                   and yyyymmdd between '{sd}' and '{ed}')\n",
    "                             where refresh_rank = 1\n",
    "                             and servicenames not like '%Auto%'\n",
    "                             order by yyyymmdd, incentiveid, subincentiveid, number_rules_completed \n",
    "                          \"\"\".format(sd=start_date.replace('-',''), ed=end_date.replace('-',''), ct=city.lower())\n",
    "    \n",
    "    tmp = pd.read_sql(inc_completion_query, presto_conn)\n",
    "    print(' fetched achievement data at incentive_id level ', len(tmp))\n",
    "\n",
    "    return tmp\n",
    "\n",
    "if fetch_incentive_achievement:\n",
    "    df_inc_completion = pd.DataFrame()\n",
    "\n",
    "    date_list = [pd.to_datetime(experiment_start_date) + timedelta(days=x) for x in range((pd.to_datetime(experiment_end_date)-pd.to_datetime(experiment_start_date)).days + 1)\n",
    "             if (pd.to_datetime(experiment_start_date) + timedelta(days=x)).weekday() == (pd.to_datetime(experiment_end_date)).weekday()]\n",
    "    if pd.to_datetime(experiment_start_date) not in date_list:\n",
    "        date_list.insert(0, pd.to_datetime(experiment_start_date))\n",
    "    date_list = [x.strftime('%Y-%m-%d') for x in date_list]\n",
    "\n",
    "    for sd, ed in zip(date_list, date_list[1:]) :\n",
    "        try:\n",
    "            inc_completion = get_incetive_completion(sd, ed, city)\n",
    "        except:\n",
    "            time.sleep(60)\n",
    "            inc_completion = get_incetive_completion(sd, ed, city)\n",
    "        df_inc_completion = pd.concat([df_inc_completion, inc_completion])\n",
    "\n",
    "    df_inc_completion = df_inc_completion.drop_duplicates()\n",
    "    df_inc_completion['yyyymmdd'] = pd.to_datetime(df_inc_completion['yyyymmdd'])\n",
    "    print(df_inc_completion.shape)\n",
    "    \n",
    "    if experiment_type == 'pre/post':\n",
    "        df_inc_completion_control = pd.DataFrame()\n",
    "\n",
    "        date_list = [pd.to_datetime(control_start_date) + timedelta(days=x) for x in range((pd.to_datetime(control_end_date)-pd.to_datetime(control_start_date)).days + 1)\n",
    "                     if (pd.to_datetime(control_start_date) + timedelta(days=x)).weekday() == (pd.to_datetime(control_end_date)).weekday()]\n",
    "        if pd.to_datetime(control_start_date) not in date_list:\n",
    "            date_list.insert(0, pd.to_datetime(control_start_date))\n",
    "        date_list = [x.strftime('%Y-%m-%d') for x in date_list]\n",
    "\n",
    "        for sd, ed in zip(date_list, date_list[1:]) :\n",
    "            try:\n",
    "                inc_completion = get_incetive_completion(sd, ed, city)\n",
    "            except:\n",
    "                time.sleep(60)\n",
    "                inc_completion = get_incetive_completion(sd, ed, city)\n",
    "            df_inc_completion_control = pd.concat([df_inc_completion_control, inc_completion])\n",
    "\n",
    "        df_inc_completion_control = df_inc_completion_control.drop_duplicates()\n",
    "        df_inc_completion_control['yyyymmdd'] = pd.to_datetime(df_inc_completion_control['yyyymmdd'])\n",
    "        print(df_inc_completion_control.shape)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1426ef86-a73c-4085-8081-26a4d72ff263",
   "metadata": {},
   "outputs": [],
   "source": [
    "if fetch_incentive_achievement:\n",
    "    test_incentivename = {'ALLOCATOR_MUM_LP_INTER_LO_19092022_25092022_DAILY': ['HP_Daily'],\n",
    "                          'Sun01 POC HP plus Active HP Dynamic': ['HP_Inter', 'HP_Intra']}\n",
    "\n",
    "    control_incentivename = {}\n",
    "\n",
    "    test_incentivename_df = pd.concat(pd.DataFrame({'incentivename':k, 'POC_Segment':v}) for k, v in test_incentivename.items())\n",
    "\n",
    "    df_inc_completion['experiment_group'] = np.where(df_inc_completion['incentivename'].isin(test_incentivename.keys()), 'test', 'control')\n",
    "\n",
    "    df_inc_completion = df_inc_completion.pivot_table(index = ['cities', 'incentivetype', 'incentivename', 'dayslot', \n",
    "                                                               'timeslot_fromtime', 'timeslot_totime', 'yyyymmdd'], \n",
    "                                                      columns = ['number_rules_completed'],\n",
    "                                                      values = ['num_achieved_cumulative'],\n",
    "                                                      aggfunc = 'sum').fillna(0)\n",
    "\n",
    "    df_inc_completion.columns = ['achieved_captains_slab_'+str(i[1]) for i in df_inc_completion.columns.ravel()]\n",
    "    df_inc_completion.reset_index(inplace=True)\n",
    "\n",
    "    df_inc_weekly = df_inc_completion[df_inc_completion['incentivetype'] == 'Weekly Fixed'].groupby(['cities', 'experiment_group',\n",
    "                                                                                                     'incentivename', 'incentivetype', \n",
    "                                                                                                     'timeslot_fromtime', 'timeslot_totime'],\n",
    "                                                                                                     as_index=False).max()\n",
    "    df_inc_daily = df_inc_completion[df_inc_completion['incentivetype'] == 'Daily'].groupby(['cities', 'experiment_group',\n",
    "                                                                                             'incentivename', 'incentivetype', \n",
    "                                                                                             'timeslot_fromtime', 'timeslot_totime'],\n",
    "                                                                                             as_index=False).sum()\n",
    "    df_inc_daily_weekly = pd.concat([df_inc_daily, df_inc_weekly], axis=0).drop(columns=['dayslot', 'yyyymmdd'])\n",
    "\n",
    "    df_inc_daily_weekly['perc_ach_slab1'] = df_inc_daily_weekly['achieved_captains_slab_1']/df_inc_daily_weekly['achieved_captains_slab_0']\n",
    "    df_inc_daily_weekly['perc_ach_slab2'] = df_inc_daily_weekly['achieved_captains_slab_2']/df_inc_daily_weekly['achieved_captains_slab_0']\n",
    "    df_inc_daily_weekly['perc_ach_slab3'] = df_inc_daily_weekly['achieved_captains_slab_3']/df_inc_daily_weekly['achieved_captains_slab_0']\n",
    "    df_inc_daily_weekly['perc_ach_slab4'] = df_inc_daily_weekly['achieved_captains_slab_4']/df_inc_daily_weekly['achieved_captains_slab_0']\n",
    "\n",
    "    df_inc_daily_weekly.drop(columns=['achieved_captains_slab_0', 'achieved_captains_slab_1', 'achieved_captains_slab_2',\n",
    "                                      'achieved_captains_slab_3', 'achieved_captains_slab_4'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bf96cfcd-f400-466d-8421-3b6ab6b64d51",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fetching burn data for :  2022-11-21  to  2022-11-27\n",
      " fetched burn for captains 44750\n",
      "(44750, 8)\n"
     ]
    }
   ],
   "source": [
    "## Burn data ##\n",
    "\n",
    "def get_burn(start_date, end_date, city):\n",
    "    \n",
    "    print('fetching burn data for : ', start_date, ' to ', end_date)\n",
    "    burn_query = \"\"\"select \n",
    "                    riderid as captain_id, yyyymmdd, city,\n",
    "                    sum(case when transactiontype = 'specialIncentive' and incentiveType='Weekly Fixed' then cast(amount as double) else 0.0 end) as weekly_incentive,\n",
    "                    sum(case when transactiontype = 'specialIncentive' and incentiveType='Daily' then cast(amount as double) else 0.0 end) as daily_incentive,\n",
    "                    sum(case when serviceType = '572e29b0116b5db3057bd821' then cast(totalEarning as double) else  0.0 end) as link_order_earning,\n",
    "                    sum(case when transactiontype = 'orders' then cast(totalEarning as double) else  0.0 end) as total_order_earning,\n",
    "                    sum(cast(amount as double)) as total_earning\n",
    "                    from(select \n",
    "                         riderid, city, date_trunc('week', date_parse(yyyymmdd, '%Y%m%d')) as week, yyyymmdd,\n",
    "                         incentiveData_startDate, incentiveName, orderSlabData_orderEarning, totalEarning,\n",
    "                         tincentiveidl as incentiveid, incentivestage, amount, incentiveData_ordersIncentiveSlab,\n",
    "                         subincentiveid, transactiontype, incentiveType, servicetype, \n",
    "                         row_number() over(partition by raw_tbl._id order by updated_epoch desc) as row_id\n",
    "                         from raw.mongodb_rapidopayroll_riderspaymentnew_immutable as raw_tbl\n",
    "                         where yyyymmdd between '{sd}' and '{ed}'\n",
    "                         and lower(city) = '{ct}'\n",
    "                         and status ='success'\n",
    "                         and riderid in (select captainId from datasets.captain_single_view \n",
    "                                         where activationdate is not null\n",
    "                                         and lower(shift) not like '%auto%'))\n",
    "                    where row_id=1\n",
    "                    group by 1,2,3\n",
    "                \"\"\".format(sd=start_date.replace('-', ''), ed=end_date.replace('-', ''), ct=city.lower())\n",
    "    \n",
    "    tmp = pd.read_sql(burn_query, presto_conn)\n",
    "    print(' fetched burn for captains', len(tmp))\n",
    "\n",
    "    return tmp\n",
    "\n",
    "if fetch_burn:\n",
    "    df_burn = pd.DataFrame()\n",
    "\n",
    "    date_list = [pd.to_datetime(experiment_start_date) + timedelta(days=x) for x in range((pd.to_datetime(experiment_end_date)-pd.to_datetime(experiment_start_date)).days + 1)\n",
    "             if (pd.to_datetime(experiment_start_date) + timedelta(days=x)).weekday() == (pd.to_datetime(experiment_end_date)).weekday()]\n",
    "    if pd.to_datetime(experiment_start_date) not in date_list:\n",
    "        date_list.insert(0, pd.to_datetime(experiment_start_date))\n",
    "    date_list = [x.strftime('%Y-%m-%d') for x in date_list]\n",
    "\n",
    "    for sd, ed in zip(date_list, date_list[1:]) :\n",
    "        try:\n",
    "            burn = get_burn(sd, ed, city)\n",
    "        except:\n",
    "            time.sleep(60)\n",
    "            burn = get_burn(sd, ed, city)\n",
    "        df_burn = pd.concat([df_burn, burn])\n",
    "\n",
    "    df_burn = df_burn.drop_duplicates(['captain_id', 'city', 'yyyymmdd'])\n",
    "    df_burn['yyyymmdd'] = pd.to_datetime(df_burn['yyyymmdd'])\n",
    "    print(df_burn.shape)\n",
    "    \n",
    "    if experiment_type == 'pre/post':\n",
    "        df_burn_control = pd.DataFrame()\n",
    "\n",
    "        date_list = [pd.to_datetime(control_start_date) + timedelta(days=x) for x in range((pd.to_datetime(control_end_date)-pd.to_datetime(control_start_date)).days + 1)\n",
    "                     if (pd.to_datetime(control_start_date) + timedelta(days=x)).weekday() == (pd.to_datetime(control_end_date)).weekday()]\n",
    "        if pd.to_datetime(control_start_date) not in date_list:\n",
    "            date_list.insert(0, pd.to_datetime(control_start_date))\n",
    "        date_list = [x.strftime('%Y-%m-%d') for x in date_list]\n",
    "\n",
    "        for sd, ed in zip(date_list, date_list[1:]) :\n",
    "            try:\n",
    "                burn = get_burn(sd, ed, city)\n",
    "            except:\n",
    "                time.sleep(60)\n",
    "                burn = get_burn(sd, ed, city)\n",
    "            df_burn_control = pd.concat([df_burn_control, burn])\n",
    "\n",
    "        df_burn_control = df_burn_control.drop_duplicates(['captain_id', 'city', 'yyyymmdd'])\n",
    "        df_burn_control['yyyymmdd'] = pd.to_datetime(df_burn_control['yyyymmdd'])\n",
    "        print(df_burn_control.shape)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "10b71c49-0c90-463b-9bd4-1ffe875e5ede",
   "metadata": {},
   "outputs": [],
   "source": [
    "if fetch_burn:\n",
    "    df_burn = df_burn.groupby(['captain_id', 'city'], \n",
    "                              as_index=False)[['weekly_incentive', 'daily_incentive', 'link_order_earning', \n",
    "                                               'total_order_earning', 'total_earning']].sum()\n",
    "    df_burn['weekly_incentive_achiever'] = np.where(df_burn['weekly_incentive'] > 0, 1, 0)\n",
    "    df_burn['daily_incentive_achiever'] = np.where(df_burn['daily_incentive'] > 0, 1, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "1e10ae75-1688-4285-8368-9511814b811b",
   "metadata": {},
   "outputs": [],
   "source": [
    "sum_cols = ['captain_count', \n",
    "            'total_pings', 'accepted_pings', 'dropped_orders',\n",
    "            'total_link_pings', 'accepted_link_pings', 'dropped_link_orders',\n",
    "            'dropped_link_orders_morning_peak', 'dropped_link_orders_afternoon', 'dropped_link_orders_evening_peak', 'dropped_link_orders_night',\n",
    "            'daily_incentive_achiever', 'weekly_incentive_achiever',\n",
    "            'total_earning', 'total_order_earning', 'link_order_earning',\n",
    "            'daily_incentive', 'weekly_incentive', 'total_incentive', \n",
    "            'online_days', 'gross_days', 'active_days']\n",
    "\n",
    "mean_cols = ['online_captains', 'gross_captains', 'net_captains']\n",
    "\n",
    "captain_segment = pd.read_csv('MUM_POCV4_20221116.csv')\n",
    "test_captain_ids = pd.read_csv('POC v4 experiment - MUM - Selectors - Week 47.csv')\n",
    "test_captain_ids = list(test_captain_ids['captain_id'].unique())\n",
    "\n",
    "experiement_analysis_master = pd.merge(df_rides, df_burn, how='outer', on=['captain_id', 'city']).fillna(0)\n",
    "\n",
    "experiement_analysis_master = pd.merge(experiement_analysis_master, captain_segment[['captain_id', 'captain_persona']], \n",
    "                                       how='right', on='captain_id').fillna(0)\n",
    "experiement_analysis_master = experiement_analysis_master[experiement_analysis_master['captain_persona'].isin(['UHP-daily', 'UHP-inter', 'UHP-intra',\n",
    "                                                                                                               'HP-daily', 'HP-inter', 'HP-intra',\n",
    "                                                                                                               'MP-daily', 'MP-inter', 'MP-intra',\n",
    "                                                                                                               'LP-daily', 'LP-inter', 'LP-intra'])]\n",
    "\n",
    "experiement_analysis_master['experiment_group'] = np.where(experiement_analysis_master['captain_id'].isin(test_captain_ids), 'test', 'control')\n",
    "\n",
    "experiement_analysis_master['total_incentive'] = experiement_analysis_master['daily_incentive'] + experiement_analysis_master['weekly_incentive']\n",
    "\n",
    "experiement_analysis_master['captain_count'] = 1\n",
    "experiement_analysis_master['online_captains'] = np.where(experiement_analysis_master['total_pings'] > 0, 1, 0)\n",
    "experiement_analysis_master['gross_captains'] = np.where(experiement_analysis_master['accepted_pings'] > 0, 1, 0)\n",
    "experiement_analysis_master['net_captains'] = np.where(experiement_analysis_master['dropped_orders'] > 0, 1, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "eb4f658d-b932-465c-b01a-de76115603f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "segment_summary = pd.merge(experiement_analysis_master.groupby(['captain_persona', 'experiment_group'], as_index=False)[sum_cols].sum(),\n",
    "                           experiement_analysis_master.groupby(['captain_persona', 'experiment_group'], as_index=False)[mean_cols].mean(),\n",
    "                           how='left', on=['captain_persona', 'experiment_group'])\n",
    "overall_summary = pd.merge(experiement_analysis_master.groupby(['experiment_group'], as_index=False)[sum_cols].sum(),\n",
    "                           experiement_analysis_master.groupby(['experiment_group'], as_index=False)[mean_cols].mean(),\n",
    "                           how='left', on=['experiment_group'])\n",
    "overall_summary['captain_persona'] = 'overall'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "d44f2573-cf78-4670-b979-3340039cc190",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>experiment_group</th>\n",
       "      <th>captain_persona</th>\n",
       "      <th>captain_count</th>\n",
       "      <th>net_captains</th>\n",
       "      <th>dropped_orders</th>\n",
       "      <th>dropped_link_orders</th>\n",
       "      <th>active_days</th>\n",
       "      <th>weekly_rpr</th>\n",
       "      <th>daily_rpr</th>\n",
       "      <th>weekly_link_rpr</th>\n",
       "      <th>daily_link_rpr</th>\n",
       "      <th>burn_per_ride</th>\n",
       "      <th>total_incentive</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>control</td>\n",
       "      <td>HP-daily</td>\n",
       "      <td>163</td>\n",
       "      <td>0.895706</td>\n",
       "      <td>8102.0</td>\n",
       "      <td>7959.0</td>\n",
       "      <td>5.260274</td>\n",
       "      <td>49.705521</td>\n",
       "      <td>10.549479</td>\n",
       "      <td>48.828221</td>\n",
       "      <td>10.363281</td>\n",
       "      <td>13.405949</td>\n",
       "      <td>108615.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>test</td>\n",
       "      <td>HP-daily</td>\n",
       "      <td>147</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>7390.0</td>\n",
       "      <td>7311.0</td>\n",
       "      <td>5.293651</td>\n",
       "      <td>50.272109</td>\n",
       "      <td>11.079460</td>\n",
       "      <td>49.734694</td>\n",
       "      <td>10.961019</td>\n",
       "      <td>14.385115</td>\n",
       "      <td>106306.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>control</td>\n",
       "      <td>HP-inter</td>\n",
       "      <td>164</td>\n",
       "      <td>0.335366</td>\n",
       "      <td>1691.0</td>\n",
       "      <td>1484.0</td>\n",
       "      <td>3.727273</td>\n",
       "      <td>10.310976</td>\n",
       "      <td>8.248780</td>\n",
       "      <td>9.048780</td>\n",
       "      <td>7.239024</td>\n",
       "      <td>11.088705</td>\n",
       "      <td>18751.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>test</td>\n",
       "      <td>HP-inter</td>\n",
       "      <td>84</td>\n",
       "      <td>0.297619</td>\n",
       "      <td>809.0</td>\n",
       "      <td>808.0</td>\n",
       "      <td>3.320000</td>\n",
       "      <td>9.630952</td>\n",
       "      <td>9.746988</td>\n",
       "      <td>9.619048</td>\n",
       "      <td>9.734940</td>\n",
       "      <td>14.487021</td>\n",
       "      <td>11720.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>control</td>\n",
       "      <td>HP-intra</td>\n",
       "      <td>77</td>\n",
       "      <td>0.545455</td>\n",
       "      <td>1836.0</td>\n",
       "      <td>1788.0</td>\n",
       "      <td>4.357143</td>\n",
       "      <td>23.844156</td>\n",
       "      <td>10.032787</td>\n",
       "      <td>23.220779</td>\n",
       "      <td>9.770492</td>\n",
       "      <td>13.218954</td>\n",
       "      <td>24270.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>test</td>\n",
       "      <td>HP-intra</td>\n",
       "      <td>79</td>\n",
       "      <td>0.518987</td>\n",
       "      <td>1573.0</td>\n",
       "      <td>1554.0</td>\n",
       "      <td>4.146341</td>\n",
       "      <td>19.911392</td>\n",
       "      <td>9.252941</td>\n",
       "      <td>19.670886</td>\n",
       "      <td>9.141176</td>\n",
       "      <td>14.776224</td>\n",
       "      <td>23243.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>control</td>\n",
       "      <td>LP-daily</td>\n",
       "      <td>224</td>\n",
       "      <td>0.861607</td>\n",
       "      <td>3530.0</td>\n",
       "      <td>2663.0</td>\n",
       "      <td>4.409326</td>\n",
       "      <td>15.758929</td>\n",
       "      <td>4.148061</td>\n",
       "      <td>11.888393</td>\n",
       "      <td>3.129260</td>\n",
       "      <td>6.415581</td>\n",
       "      <td>22647.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>test</td>\n",
       "      <td>LP-daily</td>\n",
       "      <td>194</td>\n",
       "      <td>0.876289</td>\n",
       "      <td>3387.0</td>\n",
       "      <td>2365.0</td>\n",
       "      <td>4.435294</td>\n",
       "      <td>17.458763</td>\n",
       "      <td>4.492042</td>\n",
       "      <td>12.190722</td>\n",
       "      <td>3.136605</td>\n",
       "      <td>6.087688</td>\n",
       "      <td>20619.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>control</td>\n",
       "      <td>LP-inter</td>\n",
       "      <td>4328</td>\n",
       "      <td>0.321627</td>\n",
       "      <td>14994.0</td>\n",
       "      <td>7707.0</td>\n",
       "      <td>2.670977</td>\n",
       "      <td>3.464418</td>\n",
       "      <td>4.032813</td>\n",
       "      <td>1.780730</td>\n",
       "      <td>2.072889</td>\n",
       "      <td>3.536415</td>\n",
       "      <td>53025.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>test</td>\n",
       "      <td>LP-inter</td>\n",
       "      <td>2594</td>\n",
       "      <td>0.338473</td>\n",
       "      <td>9392.0</td>\n",
       "      <td>4678.0</td>\n",
       "      <td>2.693622</td>\n",
       "      <td>3.620663</td>\n",
       "      <td>3.971247</td>\n",
       "      <td>1.803392</td>\n",
       "      <td>1.978013</td>\n",
       "      <td>4.769698</td>\n",
       "      <td>44797.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>control</td>\n",
       "      <td>LP-intra</td>\n",
       "      <td>591</td>\n",
       "      <td>0.693739</td>\n",
       "      <td>5315.0</td>\n",
       "      <td>3499.0</td>\n",
       "      <td>3.319512</td>\n",
       "      <td>8.993232</td>\n",
       "      <td>3.905217</td>\n",
       "      <td>5.920474</td>\n",
       "      <td>2.570904</td>\n",
       "      <td>4.852681</td>\n",
       "      <td>25792.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>test</td>\n",
       "      <td>LP-intra</td>\n",
       "      <td>476</td>\n",
       "      <td>0.731092</td>\n",
       "      <td>4327.0</td>\n",
       "      <td>2875.0</td>\n",
       "      <td>3.247126</td>\n",
       "      <td>9.090336</td>\n",
       "      <td>3.829204</td>\n",
       "      <td>6.039916</td>\n",
       "      <td>2.544248</td>\n",
       "      <td>5.554888</td>\n",
       "      <td>24036.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>control</td>\n",
       "      <td>MP-daily</td>\n",
       "      <td>435</td>\n",
       "      <td>0.841379</td>\n",
       "      <td>12869.0</td>\n",
       "      <td>12162.0</td>\n",
       "      <td>5.065574</td>\n",
       "      <td>29.583908</td>\n",
       "      <td>6.941208</td>\n",
       "      <td>27.958621</td>\n",
       "      <td>6.559871</td>\n",
       "      <td>11.665864</td>\n",
       "      <td>150128.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>test</td>\n",
       "      <td>MP-daily</td>\n",
       "      <td>387</td>\n",
       "      <td>0.865633</td>\n",
       "      <td>10893.0</td>\n",
       "      <td>10177.0</td>\n",
       "      <td>4.997015</td>\n",
       "      <td>28.147287</td>\n",
       "      <td>6.507168</td>\n",
       "      <td>26.297158</td>\n",
       "      <td>6.079450</td>\n",
       "      <td>12.211237</td>\n",
       "      <td>133017.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>control</td>\n",
       "      <td>MP-inter</td>\n",
       "      <td>1227</td>\n",
       "      <td>0.370008</td>\n",
       "      <td>7676.0</td>\n",
       "      <td>7076.0</td>\n",
       "      <td>2.916300</td>\n",
       "      <td>6.255909</td>\n",
       "      <td>5.797583</td>\n",
       "      <td>5.766911</td>\n",
       "      <td>5.344411</td>\n",
       "      <td>9.916754</td>\n",
       "      <td>76121.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>test</td>\n",
       "      <td>MP-inter</td>\n",
       "      <td>696</td>\n",
       "      <td>0.301724</td>\n",
       "      <td>3536.0</td>\n",
       "      <td>3113.0</td>\n",
       "      <td>3.014286</td>\n",
       "      <td>5.080460</td>\n",
       "      <td>5.586098</td>\n",
       "      <td>4.472701</td>\n",
       "      <td>4.917852</td>\n",
       "      <td>10.508201</td>\n",
       "      <td>37157.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>control</td>\n",
       "      <td>MP-intra</td>\n",
       "      <td>410</td>\n",
       "      <td>0.626829</td>\n",
       "      <td>5761.0</td>\n",
       "      <td>5415.0</td>\n",
       "      <td>3.813230</td>\n",
       "      <td>14.051220</td>\n",
       "      <td>5.878571</td>\n",
       "      <td>13.207317</td>\n",
       "      <td>5.525510</td>\n",
       "      <td>10.585315</td>\n",
       "      <td>60982.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>test</td>\n",
       "      <td>MP-intra</td>\n",
       "      <td>320</td>\n",
       "      <td>0.618750</td>\n",
       "      <td>4287.0</td>\n",
       "      <td>4021.0</td>\n",
       "      <td>3.737374</td>\n",
       "      <td>13.396875</td>\n",
       "      <td>5.793243</td>\n",
       "      <td>12.565625</td>\n",
       "      <td>5.433784</td>\n",
       "      <td>12.304175</td>\n",
       "      <td>52748.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>control</td>\n",
       "      <td>UHP-daily</td>\n",
       "      <td>41</td>\n",
       "      <td>0.951220</td>\n",
       "      <td>3746.0</td>\n",
       "      <td>3735.0</td>\n",
       "      <td>5.615385</td>\n",
       "      <td>91.365854</td>\n",
       "      <td>17.105023</td>\n",
       "      <td>91.097561</td>\n",
       "      <td>17.054795</td>\n",
       "      <td>14.855045</td>\n",
       "      <td>55647.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>test</td>\n",
       "      <td>UHP-daily</td>\n",
       "      <td>28</td>\n",
       "      <td>0.928571</td>\n",
       "      <td>2376.0</td>\n",
       "      <td>2376.0</td>\n",
       "      <td>5.384615</td>\n",
       "      <td>84.857143</td>\n",
       "      <td>16.971429</td>\n",
       "      <td>84.857143</td>\n",
       "      <td>16.971429</td>\n",
       "      <td>16.055135</td>\n",
       "      <td>38147.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>control</td>\n",
       "      <td>UHP-inter</td>\n",
       "      <td>46</td>\n",
       "      <td>0.521739</td>\n",
       "      <td>738.0</td>\n",
       "      <td>732.0</td>\n",
       "      <td>2.916667</td>\n",
       "      <td>16.043478</td>\n",
       "      <td>10.542857</td>\n",
       "      <td>15.913043</td>\n",
       "      <td>10.457143</td>\n",
       "      <td>14.444444</td>\n",
       "      <td>10660.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>test</td>\n",
       "      <td>UHP-inter</td>\n",
       "      <td>35</td>\n",
       "      <td>0.571429</td>\n",
       "      <td>441.0</td>\n",
       "      <td>409.0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>12.600000</td>\n",
       "      <td>7.350000</td>\n",
       "      <td>11.685714</td>\n",
       "      <td>6.816667</td>\n",
       "      <td>11.684807</td>\n",
       "      <td>5153.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>control</td>\n",
       "      <td>UHP-intra</td>\n",
       "      <td>19</td>\n",
       "      <td>0.368421</td>\n",
       "      <td>665.0</td>\n",
       "      <td>665.0</td>\n",
       "      <td>5.714286</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>16.625000</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>16.625000</td>\n",
       "      <td>17.018045</td>\n",
       "      <td>11317.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>test</td>\n",
       "      <td>UHP-intra</td>\n",
       "      <td>25</td>\n",
       "      <td>0.320000</td>\n",
       "      <td>545.0</td>\n",
       "      <td>545.0</td>\n",
       "      <td>4.625000</td>\n",
       "      <td>21.800000</td>\n",
       "      <td>14.729730</td>\n",
       "      <td>21.800000</td>\n",
       "      <td>14.729730</td>\n",
       "      <td>16.333945</td>\n",
       "      <td>8902.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   experiment_group captain_persona  captain_count  net_captains  \\\n",
       "0           control        HP-daily            163      0.895706   \n",
       "1              test        HP-daily            147      0.857143   \n",
       "2           control        HP-inter            164      0.335366   \n",
       "3              test        HP-inter             84      0.297619   \n",
       "4           control        HP-intra             77      0.545455   \n",
       "5              test        HP-intra             79      0.518987   \n",
       "6           control        LP-daily            224      0.861607   \n",
       "7              test        LP-daily            194      0.876289   \n",
       "8           control        LP-inter           4328      0.321627   \n",
       "9              test        LP-inter           2594      0.338473   \n",
       "10          control        LP-intra            591      0.693739   \n",
       "11             test        LP-intra            476      0.731092   \n",
       "12          control        MP-daily            435      0.841379   \n",
       "13             test        MP-daily            387      0.865633   \n",
       "14          control        MP-inter           1227      0.370008   \n",
       "15             test        MP-inter            696      0.301724   \n",
       "16          control        MP-intra            410      0.626829   \n",
       "17             test        MP-intra            320      0.618750   \n",
       "18          control       UHP-daily             41      0.951220   \n",
       "19             test       UHP-daily             28      0.928571   \n",
       "20          control       UHP-inter             46      0.521739   \n",
       "21             test       UHP-inter             35      0.571429   \n",
       "22          control       UHP-intra             19      0.368421   \n",
       "23             test       UHP-intra             25      0.320000   \n",
       "\n",
       "    dropped_orders  dropped_link_orders  active_days  weekly_rpr  daily_rpr  \\\n",
       "0           8102.0               7959.0     5.260274   49.705521  10.549479   \n",
       "1           7390.0               7311.0     5.293651   50.272109  11.079460   \n",
       "2           1691.0               1484.0     3.727273   10.310976   8.248780   \n",
       "3            809.0                808.0     3.320000    9.630952   9.746988   \n",
       "4           1836.0               1788.0     4.357143   23.844156  10.032787   \n",
       "5           1573.0               1554.0     4.146341   19.911392   9.252941   \n",
       "6           3530.0               2663.0     4.409326   15.758929   4.148061   \n",
       "7           3387.0               2365.0     4.435294   17.458763   4.492042   \n",
       "8          14994.0               7707.0     2.670977    3.464418   4.032813   \n",
       "9           9392.0               4678.0     2.693622    3.620663   3.971247   \n",
       "10          5315.0               3499.0     3.319512    8.993232   3.905217   \n",
       "11          4327.0               2875.0     3.247126    9.090336   3.829204   \n",
       "12         12869.0              12162.0     5.065574   29.583908   6.941208   \n",
       "13         10893.0              10177.0     4.997015   28.147287   6.507168   \n",
       "14          7676.0               7076.0     2.916300    6.255909   5.797583   \n",
       "15          3536.0               3113.0     3.014286    5.080460   5.586098   \n",
       "16          5761.0               5415.0     3.813230   14.051220   5.878571   \n",
       "17          4287.0               4021.0     3.737374   13.396875   5.793243   \n",
       "18          3746.0               3735.0     5.615385   91.365854  17.105023   \n",
       "19          2376.0               2376.0     5.384615   84.857143  16.971429   \n",
       "20           738.0                732.0     2.916667   16.043478  10.542857   \n",
       "21           441.0                409.0     3.000000   12.600000   7.350000   \n",
       "22           665.0                665.0     5.714286   35.000000  16.625000   \n",
       "23           545.0                545.0     4.625000   21.800000  14.729730   \n",
       "\n",
       "    weekly_link_rpr  daily_link_rpr  burn_per_ride  total_incentive  \n",
       "0         48.828221       10.363281      13.405949         108615.0  \n",
       "1         49.734694       10.961019      14.385115         106306.0  \n",
       "2          9.048780        7.239024      11.088705          18751.0  \n",
       "3          9.619048        9.734940      14.487021          11720.0  \n",
       "4         23.220779        9.770492      13.218954          24270.0  \n",
       "5         19.670886        9.141176      14.776224          23243.0  \n",
       "6         11.888393        3.129260       6.415581          22647.0  \n",
       "7         12.190722        3.136605       6.087688          20619.0  \n",
       "8          1.780730        2.072889       3.536415          53025.0  \n",
       "9          1.803392        1.978013       4.769698          44797.0  \n",
       "10         5.920474        2.570904       4.852681          25792.0  \n",
       "11         6.039916        2.544248       5.554888          24036.0  \n",
       "12        27.958621        6.559871      11.665864         150128.0  \n",
       "13        26.297158        6.079450      12.211237         133017.0  \n",
       "14         5.766911        5.344411       9.916754          76121.0  \n",
       "15         4.472701        4.917852      10.508201          37157.0  \n",
       "16        13.207317        5.525510      10.585315          60982.0  \n",
       "17        12.565625        5.433784      12.304175          52748.0  \n",
       "18        91.097561       17.054795      14.855045          55647.0  \n",
       "19        84.857143       16.971429      16.055135          38147.0  \n",
       "20        15.913043       10.457143      14.444444          10660.0  \n",
       "21        11.685714        6.816667      11.684807           5153.0  \n",
       "22        35.000000       16.625000      17.018045          11317.0  \n",
       "23        21.800000       14.729730      16.333945           8902.0  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "segment_summary['weekly_rpr'] = segment_summary['dropped_orders']/segment_summary['captain_count']\n",
    "segment_summary['daily_rpr'] = segment_summary['dropped_orders']/segment_summary['active_days']\n",
    "\n",
    "segment_summary['weekly_link_rpr'] = segment_summary['dropped_link_orders']/segment_summary['captain_count']\n",
    "segment_summary['daily_link_rpr'] = segment_summary['dropped_link_orders']/segment_summary['active_days']\n",
    "\n",
    "segment_summary['daily_inc_burn_per_ride'] = segment_summary['daily_incentive']/segment_summary['dropped_orders']\n",
    "segment_summary['weekly_inc_burn_per_ride'] = segment_summary['weekly_incentive']/segment_summary['dropped_orders']\n",
    "segment_summary['burn_per_ride'] = segment_summary['daily_inc_burn_per_ride'] + segment_summary['weekly_inc_burn_per_ride']\n",
    "\n",
    "segment_summary['weekly_link_rpr_morning_peak'] = segment_summary['dropped_link_orders_morning_peak']/segment_summary['captain_count']\n",
    "segment_summary['weekly_link_rpr_afternoon'] = segment_summary['dropped_link_orders_afternoon']/segment_summary['captain_count']\n",
    "segment_summary['weekly_link_rpr_evening_peak'] = segment_summary['dropped_link_orders_evening_peak']/segment_summary['captain_count']\n",
    "segment_summary['weekly_link_rpr_night'] = segment_summary['dropped_link_orders_night']/segment_summary['captain_count']\n",
    "\n",
    "segment_summary['active_days'] = segment_summary['active_days']/(segment_summary['captain_count'] * segment_summary['net_captains'])\n",
    "\n",
    "keep_cols = ['experiment_group', 'captain_persona', 'captain_count', 'net_captains',\n",
    "             'dropped_orders', 'dropped_link_orders', 'active_days',\n",
    "             'weekly_rpr', 'daily_rpr', 'weekly_link_rpr', 'daily_link_rpr',\n",
    "             'burn_per_ride', 'total_incentive']\n",
    "\n",
    "segment_summary[keep_cols]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "8f14a1e9-d921-444d-8156-e3a912fccaa4",
   "metadata": {},
   "outputs": [],
   "source": [
    "overall_summary['weekly_rpr'] = overall_summary['dropped_orders']/overall_summary['captain_count']\n",
    "overall_summary['daily_rpr'] = overall_summary['dropped_orders']/overall_summary['active_days']\n",
    "\n",
    "overall_summary['weekly_link_rpr'] = overall_summary['dropped_link_orders']/overall_summary['captain_count']\n",
    "overall_summary['daily_link_rpr'] = overall_summary['dropped_link_orders']/overall_summary['active_days']\n",
    "\n",
    "overall_summary['daily_inc_burn_per_ride'] = overall_summary['daily_incentive']/overall_summary['dropped_orders']\n",
    "overall_summary['weekly_inc_burn_per_ride'] = overall_summary['weekly_incentive']/overall_summary['dropped_orders']\n",
    "overall_summary['burn_per_ride'] = overall_summary['daily_inc_burn_per_ride'] + overall_summary['weekly_inc_burn_per_ride']\n",
    "\n",
    "overall_summary['weekly_link_rpr_morning_peak'] = overall_summary['dropped_link_orders_morning_peak']/overall_summary['captain_count']\n",
    "overall_summary['weekly_link_rpr_afternoon'] = overall_summary['dropped_link_orders_afternoon']/overall_summary['captain_count']\n",
    "overall_summary['weekly_link_rpr_evening_peak'] = overall_summary['dropped_link_orders_evening_peak']/overall_summary['captain_count']\n",
    "overall_summary['weekly_link_rpr_night'] = overall_summary['dropped_link_orders_night']/overall_summary['captain_count']\n",
    "\n",
    "overall_summary['active_days'] = overall_summary['active_days']/(overall_summary['captain_count'] * overall_summary['net_captains'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "65d8dbaa-f614-4047-a393-9828300d871f",
   "metadata": {},
   "outputs": [],
   "source": [
    "keep_cols = ['experiment_group', 'captain_persona', 'captain_count', \n",
    "             'online_captains', 'gross_captains', 'net_captains',\n",
    "             'dropped_orders', 'dropped_link_orders',\n",
    "             'active_days', 'total_incentive',\n",
    "             'weekly_rpr', 'daily_rpr', 'weekly_link_rpr', 'daily_link_rpr',\n",
    "             'burn_per_ride', 'weekly_inc_burn_per_ride', 'daily_inc_burn_per_ride',\n",
    "             'weekly_link_rpr_morning_peak', 'weekly_link_rpr_afternoon', 'weekly_link_rpr_evening_peak', 'weekly_link_rpr_night']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "38538559-e252-49cc-8642-8de819491c6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>experiment_group</th>\n",
       "      <th>control</th>\n",
       "      <th>test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>captain_persona</th>\n",
       "      <td>overall</td>\n",
       "      <td>overall</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>captain_count</th>\n",
       "      <td>7725</td>\n",
       "      <td>5065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>online_captains</th>\n",
       "      <td>0.537735</td>\n",
       "      <td>0.56387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gross_captains</th>\n",
       "      <td>0.486343</td>\n",
       "      <td>0.516288</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>net_captains</th>\n",
       "      <td>0.438188</td>\n",
       "      <td>0.470879</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dropped_orders</th>\n",
       "      <td>66923.0</td>\n",
       "      <td>48956.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>dropped_link_orders</th>\n",
       "      <td>54885.0</td>\n",
       "      <td>40232.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>active_days</th>\n",
       "      <td>3.418907</td>\n",
       "      <td>3.544235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_incentive</th>\n",
       "      <td>617955.0</td>\n",
       "      <td>505845.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weekly_rpr</th>\n",
       "      <td>8.663172</td>\n",
       "      <td>9.665548</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>daily_rpr</th>\n",
       "      <td>5.782684</td>\n",
       "      <td>5.791553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weekly_link_rpr</th>\n",
       "      <td>7.104854</td>\n",
       "      <td>7.943139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>daily_link_rpr</th>\n",
       "      <td>4.742504</td>\n",
       "      <td>4.759494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>burn_per_ride</th>\n",
       "      <td>9.233821</td>\n",
       "      <td>10.332646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weekly_inc_burn_per_ride</th>\n",
       "      <td>4.024132</td>\n",
       "      <td>4.335301</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>daily_inc_burn_per_ride</th>\n",
       "      <td>5.209689</td>\n",
       "      <td>5.997345</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weekly_link_rpr_morning_peak</th>\n",
       "      <td>2.012039</td>\n",
       "      <td>2.199605</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weekly_link_rpr_afternoon</th>\n",
       "      <td>2.126214</td>\n",
       "      <td>2.373544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weekly_link_rpr_evening_peak</th>\n",
       "      <td>2.426926</td>\n",
       "      <td>2.749852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weekly_link_rpr_night</th>\n",
       "      <td>0.539676</td>\n",
       "      <td>0.620138</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "experiment_group               control       test\n",
       "captain_persona                overall    overall\n",
       "captain_count                     7725       5065\n",
       "online_captains               0.537735    0.56387\n",
       "gross_captains                0.486343   0.516288\n",
       "net_captains                  0.438188   0.470879\n",
       "dropped_orders                 66923.0    48956.0\n",
       "dropped_link_orders            54885.0    40232.0\n",
       "active_days                   3.418907   3.544235\n",
       "total_incentive               617955.0   505845.0\n",
       "weekly_rpr                    8.663172   9.665548\n",
       "daily_rpr                     5.782684   5.791553\n",
       "weekly_link_rpr               7.104854   7.943139\n",
       "daily_link_rpr                4.742504   4.759494\n",
       "burn_per_ride                 9.233821  10.332646\n",
       "weekly_inc_burn_per_ride      4.024132   4.335301\n",
       "daily_inc_burn_per_ride       5.209689   5.997345\n",
       "weekly_link_rpr_morning_peak  2.012039   2.199605\n",
       "weekly_link_rpr_afternoon     2.126214   2.373544\n",
       "weekly_link_rpr_evening_peak  2.426926   2.749852\n",
       "weekly_link_rpr_night         0.539676   0.620138"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "overall_summary = overall_summary[keep_cols].T\n",
    "overall_summary.columns = overall_summary.iloc[0]\n",
    "overall_summary = overall_summary.drop(overall_summary.index[0])\n",
    "overall_summary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "3706073b-fcf2-4217-b1ff-6e92a6453a6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "overall_summary.to_clipboard()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "f33f660b-628e-4f69-803c-3dd50b7acd14",
   "metadata": {},
   "outputs": [],
   "source": [
    "segment_summary[segment_summary['experiment_group'] == 'test'][keep_cols].to_clipboard()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "91c99e52-72c6-470d-b6b3-e790f4d53a34",
   "metadata": {},
   "outputs": [],
   "source": [
    "segment_summary[segment_summary['experiment_group'] == 'control'][keep_cols].to_clipboard()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f7225a82-8880-4f80-b942-a8bf9a97e371",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
